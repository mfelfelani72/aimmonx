"use strict";(self.webpackChunkbuiler=self.webpackChunkbuiler||[]).push([[922],{1621:(e,t,r)=>{r.d(t,{vt:()=>d});const n=e=>{let t;const r=new Set,n=(e,n)=>{const a="function"==typeof e?e(t):e;if(!Object.is(a,t)){const e=t;t=(null!=n?n:"object"!=typeof a||null===a)?a:Object.assign({},t,a),r.forEach((r=>r(t,e)))}},a=()=>t,o={setState:n,getState:a,getInitialState:()=>i,subscribe:e=>(r.add(e),()=>r.delete(e)),destroy:()=>{console.warn("[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."),r.clear()}},i=t=e(n,a,o);return o};var a=r(6540),o=r(9242);const{useDebugValue:i}=a,{useSyncExternalStoreWithSelector:s}=o;let l=!1;const u=e=>e,c=e=>{"function"!=typeof e&&console.warn("[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.");const t="function"==typeof e?(e=>e?n(e):n)(e):e,r=(e,r)=>function(e,t=u,r){r&&!l&&(console.warn("[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"),l=!0);const n=s(e.subscribe,e.getState,e.getServerState||e.getInitialState,t,r);return i(n),n}(t,e,r);return Object.assign(r,t),r},d=e=>e?c(e):c},7134:(e,t,r)=>{function n(e,t){let r;try{r=e()}catch(e){return}return{getItem:e=>{var n;const a=e=>null===e?null:JSON.parse(e,null==t?void 0:t.reviver),o=null!=(n=r.getItem(e))?n:null;return o instanceof Promise?o.then(a):a(o)},setItem:(e,n)=>r.setItem(e,JSON.stringify(n,null==t?void 0:t.replacer)),removeItem:e=>r.removeItem(e)}}r.d(t,{KU:()=>n,Zr:()=>o});const a=e=>t=>{try{const r=e(t);return r instanceof Promise?r:{then:e=>a(e)(r),catch(e){return this}}}catch(e){return{then(e){return this},catch:t=>a(t)(e)}}},o=(e,t)=>"getStorage"in t||"serialize"in t||"deserialize"in t?(console.warn("[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead."),((e,t)=>(r,n,o)=>{let i={getStorage:()=>localStorage,serialize:JSON.stringify,deserialize:JSON.parse,partialize:e=>e,version:0,merge:(e,t)=>({...t,...e}),...t},s=!1;const l=new Set,u=new Set;let c;try{c=i.getStorage()}catch(e){}if(!c)return e(((...e)=>{console.warn(`[zustand persist middleware] Unable to update item '${i.name}', the given storage is currently unavailable.`),r(...e)}),n,o);const d=a(i.serialize),g=()=>{const e=i.partialize({...n()});let t;const r=d({state:e,version:i.version}).then((e=>c.setItem(i.name,e))).catch((e=>{t=e}));if(t)throw t;return r},m=o.setState;o.setState=(e,t)=>{m(e,t),g()};const v=e(((...e)=>{r(...e),g()}),n,o);let h;const f=()=>{var e;if(!c)return;s=!1,l.forEach((e=>e(n())));const t=(null==(e=i.onRehydrateStorage)?void 0:e.call(i,n()))||void 0;return a(c.getItem.bind(c))(i.name).then((e=>{if(e)return i.deserialize(e)})).then((e=>{if(e){if("number"!=typeof e.version||e.version===i.version)return e.state;if(i.migrate)return i.migrate(e.state,e.version);console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}})).then((e=>{var t;return h=i.merge(e,null!=(t=n())?t:v),r(h,!0),g()})).then((()=>{null==t||t(h,void 0),s=!0,u.forEach((e=>e(h)))})).catch((e=>{null==t||t(void 0,e)}))};return o.persist={setOptions:e=>{i={...i,...e},e.getStorage&&(c=e.getStorage())},clearStorage:()=>{null==c||c.removeItem(i.name)},getOptions:()=>i,rehydrate:()=>f(),hasHydrated:()=>s,onHydrate:e=>(l.add(e),()=>{l.delete(e)}),onFinishHydration:e=>(u.add(e),()=>{u.delete(e)})},f(),h||v})(e,t)):((e,t)=>(r,o,i)=>{let s={storage:n((()=>localStorage)),partialize:e=>e,version:0,merge:(e,t)=>({...t,...e}),...t},l=!1;const u=new Set,c=new Set;let d=s.storage;if(!d)return e(((...e)=>{console.warn(`[zustand persist middleware] Unable to update item '${s.name}', the given storage is currently unavailable.`),r(...e)}),o,i);const g=()=>{const e=s.partialize({...o()});return d.setItem(s.name,{state:e,version:s.version})},m=i.setState;i.setState=(e,t)=>{m(e,t),g()};const v=e(((...e)=>{r(...e),g()}),o,i);let h;i.getInitialState=()=>v;const f=()=>{var e,t;if(!d)return;l=!1,u.forEach((e=>{var t;return e(null!=(t=o())?t:v)}));const n=(null==(t=s.onRehydrateStorage)?void 0:t.call(s,null!=(e=o())?e:v))||void 0;return a(d.getItem.bind(d))(s.name).then((e=>{if(e){if("number"!=typeof e.version||e.version===s.version)return[!1,e.state];if(s.migrate)return[!0,s.migrate(e.state,e.version)];console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}return[!1,void 0]})).then((e=>{var t;const[n,a]=e;if(h=s.merge(a,null!=(t=o())?t:v),r(h,!0),n)return g()})).then((()=>{null==n||n(h,void 0),h=o(),l=!0,c.forEach((e=>e(h)))})).catch((e=>{null==n||n(void 0,e)}))};return i.persist={setOptions:e=>{s={...s,...e},e.storage&&(d=e.storage)},clearStorage:()=>{null==d||d.removeItem(s.name)},getOptions:()=>s,rehydrate:()=>f(),hasHydrated:()=>l,onHydrate:e=>(u.add(e),()=>{u.delete(e)}),onFinishHydration:e=>(c.add(e),()=>{c.delete(e)})},s.skipHydration||f(),h||v})(e,t)}}]);